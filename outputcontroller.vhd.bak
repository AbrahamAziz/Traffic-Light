library ieee;
use ieee.std_logic_1164.All;
entity outputcontroller3 is
port (
NSR, NSY, NSG, EWR, EWY, EWG     :out std_logic;
 A1, B1, C1, D1, E1, F1, G1  :out std_logic;

Timer : in STD_Logic;                   
clk    :in  std_logic;                     -- Input clock
Reset    :in  std_logic                      -- Input reset
);
end outputcontroller3;


ARCHITECTURE a OF outputcontroller3 IS
TYPE PULSER IS (s0, s1, s2, s3);
Signal sequence: PULSER;
Begin	process (clk, Reset) 
begin
	
		
if (clk' EVENT AND clk ='1') THEN
CASE sequence is

When s0 =>
if (Reset = '0') then 
	sequence <= s0; 
		NSR <= '1';
		NSY <= '1';
		NSG <= '1';
		EWR <= '1';
		EWY <= '1';
		EWG <= '1';
		A1 <= '1';
		B1 <= '1';
		C1 <= '1';
		D1 <= '1';
		E1 <= '1';
	   F1 <= '1';
		G1 <= '1';
		
	else	
		
if timer <='0' then
sequence <= s0; 
      NSR <= '0';
		NSY <= '1';
		NSG <= '1';
		EWR <= '1'; 
		EWY <= '1';
		EWG <= '0';
		A1 <= '1';
		B1 <= '0';
		C1 <= '0';
		D1 <= '1';
		E1 <= '1';
	   F1 <= '1';
		G1 <= '1';
		
elsif timer <='1' then
sequence <= s1; 
      NSR <= '0';
		NSY <= '1'; 
		NSG <= '1'; 
		EWR <= '1';
		EWY <= '0';
		EWG <= '1';
		A1 <= '0';
		B1 <= '0';
		C1 <= '1';
		D1 <= '0';
		E1 <= '0';
	   F1 <= '1';
		G1 <= '0';
	end if;
end if;








WHEN s1 =>
	if (Reset = '0') then 
	sequence <= s0; 
		NSR <= '1';
		NSY <= '1';
		NSG <= '1';
		EWR <= '1';
		EWY <= '1';
		EWG <= '1';
		A1 <= '1';
		B1 <= '1';
		C1 <= '1';
		D1 <= '1';
		E1 <= '1';
	   F1 <= '1';
		G1 <= '1';
	else	
		
sequence <= s2;
      NSR <= '1'; 
		NSY <= '1';
		NSG <= '0'; 
		EWR <= '0'; 
		EWY <= '1';
		EWG <= '1'; 
		A1 <= '0';
		B1 <= '0';
		C1 <= '0';
		D1 <= '0';
		E1 <= '1';
	   F1 <= '1';
		G1 <= '0';
	end if;	
	
	
	
	
	
	
when s2 =>
if (Reset = '0') then 
	sequence <= s0; 
		NSR <= '1';
		NSY <= '1';
		NSG <= '1';
		EWR <= '1';
		EWY <= '1';
		EWG <= '1';
		A1 <= '1';
		B1 <= '1';
		C1 <= '1';
		D1 <= '1';
		E1 <= '1';
	   F1 <= '1';
		G1 <= '1';
	else	
		
if timer<= '0' then
sequence <= s2; 
      NSR <= '1'; 
		NSY <= '1';
		NSG <= '0'; 
		EWR <= '0'; 
		EWY <= '1';
		EWG <= '1';
		A1 <= '0';
		B1 <= '0';
		C1 <= '0';
		D1 <= '0';
		E1 <= '1';
	   F1 <= '1';
		G1 <= '0';
		
Elsif timer <='1' then
sequence <= s3; 
      NSR <= '1';
		NSY <= '0';
		NSG <= '1'; 
		EWR <= '0'; 
		EWY <= '1'; 
		EWG <= '1'; 
		A1 <= '1';
		B1 <= '0';
		C1 <= '0';
		D1 <= '1';
		E1 <= '1';
	   F1 <= '0';
		G1 <= '0';
		
	end if;
	end if;	
		
		
		
		
		
		
		
WHEN s3 =>
if (Reset = '0') then 
	sequence <= s0; 
		NSR <= '1';
		NSY <= '1';
		NSG <= '1';
		EWR <= '1';
		EWY <= '1';
		EWG <= '1';
		A1 <= '1';
		B1 <= '1';
		C1 <= '1';
		D1 <= '1';
		E1 <= '1';
	   F1 <= '1';
		G1 <= '1';
	else	
		
sequence <= s0;
      NSR <= '0';
		NSY <= '1';
		NSG <= '1'; 
		EWR <= '1'; 
		EWY <= '1';
		EWG <= '0';
		A1 <= '1';
		B1 <= '0';
		C1 <= '0';
		D1 <= '1';
		E1 <= '1';
	   F1 <= '1';
		G1 <= '1';
		end if;	
	
	
	
	End CASE;
	End if;
	end process;
	end a;
	
		